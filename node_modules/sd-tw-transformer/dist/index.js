'use strict';

var s=function(){return s=Object.assign||function(e){for(var n,r=1,a=arguments.length;r<a;r++){n=arguments[r];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o]);}return e},s.apply(this,arguments)};function h(t){return t.toLowerCase()}var C=[/([a-z0-9])([A-Z])/g,/([A-Z])([A-Z][a-z])/g],O=/[^A-Z0-9]+/gi;function _(t,e){e===void 0&&(e={});for(var n=e.splitRegexp,r=n===void 0?C:n,a=e.stripRegexp,o=a===void 0?O:a,i=e.transform,l=i===void 0?h:i,f=e.delimiter,c=f===void 0?" ":f,p=b(b(t,r,"$1\0$2"),o,"\0"),d=0,y=p.length;p.charAt(d)==="\0";)d++;for(;p.charAt(y-1)==="\0";)y--;return p.slice(d,y).split("\0").map(l).join(c)}function b(t,e,n){return e instanceof RegExp?t.replace(e,n):e.reduce(function(r,a){return r.replace(a,n)},t)}function m(t,e){var n=t.charAt(0),r=t.substr(1).toLowerCase();return e>0&&n>="0"&&n<="9"?"_"+n+r:""+n.toUpperCase()+r}function x(t,e){return e===void 0&&(e={}),_(t,s({delimiter:"",transform:m},e))}function P(t,e){return e===0?t.toLowerCase():m(t,e)}function g(t,e){return e===void 0&&(e={}),x(t,s({transform:P},e))}var T=(t,e,n)=>{let r=e.length-1;for(let a=0;a<r;++a){let o=g(e[a]);o in t||(t[o]={}),t=t[o];}t[g(e[r])]=n;},u=(t,e)=>t===void 0?e:t,v=(t,e,n=" ".repeat(4))=>e!=="all"?t:n+t,w=(t,e)=>t.replace(/"(\\[^]|[^\\"])*"\s*:?/g,r=>/[0-9]/.test(r)&&/[a-zA-Z]/.test(r)?r:/:$/.test(r)?v(r.replace(/^"|"(?=\s*:$)/g,""),e):r).replace(/}/g,r=>v(r,e));var j=(t,e,n)=>{let r=t.reduce((o,i)=>{if(i.attributes===void 0)throw new Error(`Token ${i.name} has no attributes`);return (i.attributes.category===e||e==="all")&&(n?o[i.path.join(".")]=`var(--${i.name})`:o[i.path.join(".")]=i.value),o},{}),a={};return Object.keys(r).forEach(o=>{let i=o.split(".").filter(l=>l!==e);T(a,i,r[o]);}),JSON.stringify(a,null,2)},S=({dictionary:{allTokens:t},type:e,isVariables:n,tailwind:r})=>{let a=j(t,e,n);if(e==="all"){u(r?.darkMode,"class");let i=u(Array.isArray(r?.content)?r?.content.map(c=>`"${c}"`):r?.content,['"./src/**/*.{ts,tsx}"']),l=u(r?.plugins?.map(c=>`require("@tailwindcss/${c}")`),[]),f=`/** @type {import('tailwindcss').Config} */
module.exports = {
  mode: "jit",
  content: [${i}],
  darkMode: ['class', '[data-theme="dark"]'],
  theme: {
    extend: ${w(a,e)},
  },`;return l.length>0&&(f+=`
  plugins: [${l}]`),f+=`
}`,f}else return `module.exports = ${w(a)}`},Z=({type:t,isVariables:e=!1,source:n,transforms:r,buildPath:a,tailwind:o})=>{if(t===void 0)throw new Error("type is required");return {source:u(n,["tokens/**/*.json"]),format:{tailwindFormat:({dictionary:i})=>S({dictionary:i,isVariables:e,type:t,tailwind:o})},platforms:{[t!=="all"?`tailwind/${t}`:"tailwind"]:{transforms:u(r,["attribute/cti","name/cti/kebab"]),buildPath:u(a,"build/web/"),files:[{destination:t!=="all"?`${t}.tailwind.cjs`:"tailwind.config.cjs",format:"tailwindFormat"}]}}}};

exports.makeSdTailwindConfig = Z;
