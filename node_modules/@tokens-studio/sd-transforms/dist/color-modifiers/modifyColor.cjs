'use strict';

var Color = require('colorjs.io');
var transparentize = require('./transparentize.cjs');
var mix = require('./mix.cjs');
var darken = require('./darken.cjs');
var lighten = require('./lighten.cjs');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var Color__default = /*#__PURE__*/_interopDefault(Color);

function modifyColor(baseColor, modifier) {
    if (baseColor === undefined) {
        return baseColor;
    }
    const color = new Color__default.default(baseColor);
    let returnedColor = color;
    try {
        switch (modifier.type) {
            case 'lighten':
                returnedColor = lighten.lighten(color, modifier.space, Number(modifier.value));
                break;
            case 'darken':
                returnedColor = darken.darken(color, modifier.space, Number(modifier.value));
                break;
            case 'mix':
                returnedColor = mix.mix(color, Number(modifier.value), new Color__default.default(modifier.color));
                break;
            case 'alpha': {
                returnedColor = transparentize.transparentize(color, Number(modifier.value));
                break;
            }
            default:
                returnedColor = color;
                break;
        }
        returnedColor = returnedColor.to(modifier.space);
        if (modifier.format && ['lch', 'srgb', 'p3', 'hsl'].includes(modifier.format)) {
            returnedColor = returnedColor.to(modifier.format);
        }
        return returnedColor.toString({
            inGamut: true,
            precision: 3,
            format: modifier.format,
        });
    }
    catch (e) {
        return baseColor;
    }
}

exports.modifyColor = modifyColor;
